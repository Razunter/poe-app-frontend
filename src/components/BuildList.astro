---
type Props = {
  collection: VersionDataType['buildList'][number] | undefined
  currentVersionNumber: string
  allVersionsData: VersionType[]
}

const {collection, currentVersionNumber, allVersionsData} = Astro.props as Props

if (!collection) {
    return
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const intersection = (array: any[], ...args: any[]) => {
  return array.filter((item) => {
    return args.every((array_) => {
      return array_.includes(item)
    })
  })
}

const isBuildCurrent = (
  buildVersions: string[],
  thisPageVersion: string,
  allVersions: VersionType[]
) => {
  if (buildVersions !== undefined && Array.isArray(buildVersions)) {
    if (buildVersions.includes(thisPageVersion)) {
      return true
    } else {
      const versionData = allVersions.find((version) => {
        return version.version === thisPageVersion
      })
      if (versionData?.compatible && Array.isArray(versionData.compatible)) {
        const inter = intersection(versionData.compatible, buildVersions)
        return inter.length > 0
      }
    }
  }

  return false
}

const filteredBuilds: BuildDataType[] = []
const filteredBuildsNoVideo: BuildDataType[] = []
for (const build of collection.builds) {
  if (
    !build.skip &&
    isBuildCurrent(build.versions, currentVersionNumber, allVersionsData)
  ) {
    if (build.videothumb?.['480w']) {
      filteredBuilds.push(build)
    } else {
      filteredBuildsNoVideo.push(build)
    }
  }
}
---

{
  filteredBuilds.map((build) => {
    return build.title
    // return macros.video(
    //   build.title,
    //   build.url,
    //   build.video,
    //   build.videothumb,
    //   build.author
    // )
  })
}

{
  filteredBuildsNoVideo.length > 0 && (
    <div class="build build--novideo">
      <div class="build-title">
        <h3>No video</h3>
      </div>
      <ul>
        {filteredBuildsNoVideo.map((build) => {
          return (
            <li>
              <a
                class="build-link"
                href="{{ build.url }}"
                target="_blank"
                rel="noopener"
              >
                {build.author && (
                  <>
                    <span class="build-author">{build.author}</span> -{' '}
                  </>
                )}
                {build.title}
              </a>
            </li>
          )
        })}
      </ul>
    </div>
  )
}
