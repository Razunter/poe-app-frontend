---
import Layout from '@layouts/Layout.astro'
import BuildList from '@src/components/BuildList.astro'
import FooterNav from '@src/components/FooterNav.astro'
import SvgIconLink from '@src/components/SvgIconLink.astro'
import sprite from '@src/components/svgsprite'
import versionsData from '@src/data/versions.json'
import { type VersionDataType, type VersionType } from '@src/types.ts'
import { type GetStaticPathsItem } from 'astro'

// eslint-disable-next-line func-style
export async function getStaticPaths() {
  return structuredClone(versionsData.versions)
    .reverse()
    .map((mapVersion) => {
      return {
        params: {
          version:
            mapVersion.version === versionsData.currentVersion ? undefined : 'old-' + mapVersion.version + '.html',
        },
        props: {
          currentVersionData: mapVersion,
        },
      } as GetStaticPathsItem
    })
}

const { currentVersionData: version } = Astro.props as {
  currentVersionData: VersionType
}

const thisVersionNumber = version.version
const title = `Path of Exile ${thisVersionNumber} «${version.name}» starter builds collection (Razunter's picks)`
const description = `Quick preview of starter builds for Path of Exile v${thisVersionNumber} ${version.name}, collected by Razunter`
const reformattedVersionNumber = thisVersionNumber.replaceAll('.', '-')
const data = (await import(`../data/data-${reformattedVersionNumber}.json`)) as VersionDataType
let currentTypes = Object.entries(data.types)
const svgSprite = await sprite()

let pageHeaderVersion = `${thisVersionNumber} «${version.name}»`
if (version.url) {
  pageHeaderVersion = `<a href="${version.url}" target="_blank" rel="noopener noreferrer">${pageHeaderVersion}</a>`
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const intersection = (array: any[], ...args: any[]) => {
  return array.filter((item) => {
    return args.every((array_) => {
      return array_.includes(item)
    })
  })
}

const isBuildCurrent = (buildVersions: string[], thisPageVersion: string, allVersions: VersionType[]) => {
  if (buildVersions !== undefined && Array.isArray(buildVersions)) {
    if (buildVersions.includes(thisPageVersion)) {
      return true
    } else {
      const versionData = allVersions.find((version_) => {
        return version_.version === thisPageVersion
      })
      if (versionData?.compatible && Array.isArray(versionData.compatible)) {
        const inter = intersection(versionData.compatible, buildVersions)
        return inter.length > 0
      }
    }
  }

  return false
}

const filterVersionData = () => {
  const emptyCategories: string[] = []

  for (const type of currentTypes) {
    const buildCategoryIndex = data.buildList.findIndex((item) => {
      return item.type === type[0]
    })

    if (buildCategoryIndex !== -1) {
      data.buildList[buildCategoryIndex].builds = data.buildList[buildCategoryIndex].builds.filter((build) => {
        return !build.skip && isBuildCurrent(build.versions, version.version, versionsData.versions)
      })

      if (data.buildList[buildCategoryIndex].builds.length === 0) {
        emptyCategories.push(data.buildList[buildCategoryIndex].type)
      }
    }
  }

  if (emptyCategories.length > 0) {
    currentTypes = currentTypes.filter((type) => {
      return !emptyCategories.includes(type[0])
    })
  }
}

filterVersionData()
---

<Layout
  title={title}
  description={description}
>
  <Fragment slot="nav">
    <div
      hidden
      set:html={svgSprite}
    />
    <nav
      class="mainnav"
      aria-label="Main navigation"
    >
      <ul>
        {
          currentTypes.map(([typekey, typename]) => {
            return (
              <li>
                <a
                  href={'#' + typekey}
                  title={typename}
                >
                  <SvgIconLink icon={typekey} />
                </a>
              </li>
            )
          })
        }
      </ul>
    </nav>
  </Fragment>

  <Fragment slot="header">
    <h1>
      Path of Exile <Fragment set:html={pageHeaderVersion} /> starter builds collection (Razunter's picks)
    </h1>
    {
      (version.wip || version.note) && (
        <div class="subtitle">
          {version.wip && 'Work in Progress!'}
          {version.note && version.note}
        </div>
      )
    }
    {
      thisVersionNumber !== versionsData.currentVersion && (
        <div class="subtitle">
          old version, new version <a href="/index.html">here</a>
        </div>
      )
    }
  </Fragment>

  {
    currentTypes.map(([typekey, typename]) => {
      return (
        <section
          id={typekey}
          class="section"
        >
          <h2 class="section-title">
            <SvgIconLink icon={typekey} />
            {typename}
          </h2>
          <div class="builds-collection">
            <BuildList
              collection={data.buildList.find((item) => {
                return item.type === typekey
              })}
            />
          </div>
        </section>
      )
    })
  }

  <Fragment slot="footer">
    <FooterNav
      versions={versionsData.versions}
      currentVersionNumber={versionsData.currentVersion}
    />
    <ul class="footer-links">
      <li>
        <a
          href="https://www.pathofexile.com/"
          target="_blank"
          rel="noopener"
          >Path of Exile</a
        >
      </li>
      <li>
        Site created by Razunter. <a
          href="https://github.com/Razunter/poe-app-frontend"
          target="_blank"
          rel="noopener"
          >GitHub</a
        >
      </li>
    </ul>
  </Fragment>
</Layout>
